diff --git a/pico/bin/pico2wave.c b/pico/bin/pico2wave.c
index 1420fe0..e575a6b 100644
--- a/pico/bin/pico2wave.c
+++ b/pico/bin/pico2wave.c
@@ -19,15 +19,18 @@
  */
 
 
-#include <popt.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <stdint.h>
 #include <string.h>
 
+extern "C"
+{
+#include <popt.h>
 #include <picoapi.h>
 #include <picoapid.h>
 #include <picoos.h>
-
+}
 
 /* adaptation layer defines */
 #define PICO_MEM_SIZE       2500000
@@ -144,7 +147,7 @@ int main(int argc, const char *argv[]) {
 
     poptFreeContext(optCon);
     
-    buffer = malloc( bufferSize );
+    buffer = (int8_t *) malloc( bufferSize );
     
     int ret, getstatus;
     pico_Char * inp = NULL;
diff --git a/pico/lib/picoapid.h b/pico/lib/picoapid.h
index ef62701..d449424 100644
--- a/pico/lib/picoapid.h
+++ b/pico/lib/picoapid.h
@@ -57,7 +57,7 @@ typedef struct pico_system {
 
 /* declared in picoapi.c */
 extern int is_valid_system_handle(pico_System system);
-extern picoos_Common pico_sysGetCommon(pico_System this);
+extern picoos_Common pico_sysGetCommon(pico_System me);
 
 
 #if 0
diff --git a/pico/lib/picoctrl.h b/pico/lib/picoctrl.h
index f7b9b6e..98ec6eb 100644
--- a/pico/lib/picoctrl.h
+++ b/pico/lib/picoctrl.h
@@ -48,7 +48,7 @@ extern "C" {
 
 typedef struct picoctrl_engine * picoctrl_Engine;
 
-picoos_int16 picoctrl_isValidEngineHandle(picoctrl_Engine this);
+picoos_int16 picoctrl_isValidEngineHandle(picoctrl_Engine me);
 
 picoctrl_Engine picoctrl_newEngine (
         picoos_MemoryManager mm,
@@ -59,7 +59,7 @@ picoctrl_Engine picoctrl_newEngine (
 void picoctrl_disposeEngine(
         picoos_MemoryManager mm,
         picorsrc_ResourceManager rm,
-        picoctrl_Engine * this
+        picoctrl_Engine * me
         );
 
 pico_status_t picoctrl_engFeedText(
@@ -72,7 +72,7 @@ pico_status_t picoctrl_engReset(
         picoctrl_Engine engine,
         picoos_int32 resetMode);
 
-picoos_Common picoctrl_engGetCommon(picoctrl_Engine this);
+picoos_Common picoctrl_engGetCommon(picoctrl_Engine me);
 
 picodata_step_result_t picoctrl_engFetchOutputItemBytes(
         picoctrl_Engine engine,
@@ -82,7 +82,7 @@ picodata_step_result_t picoctrl_engFetchOutputItemBytes(
 );
 
 void picoctrl_engResetExceptionManager(
-        picoctrl_Engine this
+        picoctrl_Engine me
         );
 
 
diff --git a/pico/lib/picodata.h b/pico/lib/picodata.h
index 2105051..b1eb2b6 100644
--- a/pico/lib/picodata.h
+++ b/pico/lib/picodata.h
@@ -80,16 +80,16 @@ picodata_CharBuffer picodata_newCharBuffer(picoos_MemoryManager mm,
         picoos_Common common, picoos_objsize_t size);
 
 void picodata_disposeCharBuffer(picoos_MemoryManager mm,
-                                picodata_CharBuffer * this);
+                                picodata_CharBuffer * me);
 
 /* should not be used for PUs but only for feeding the initial cb */
-pico_status_t picodata_cbPutCh(register picodata_CharBuffer this, picoos_char ch);
+pico_status_t picodata_cbPutCh(register picodata_CharBuffer me, picoos_char ch);
 
 /* should not be used for PUs other than first PU in the chain (picotok) */
-picoos_int16 picodata_cbGetCh(register picodata_CharBuffer this);
+picoos_int16 picodata_cbGetCh(register picodata_CharBuffer me);
 
 /* reset cb (as if after newCharBuffer) */
-pico_status_t picodata_cbReset (register picodata_CharBuffer this);
+pico_status_t picodata_cbReset (register picodata_CharBuffer me);
 
 /* ** CharBuffer item functions, cf. below in items section ****/
 
@@ -298,7 +298,7 @@ typedef struct picodata_itemhead
      PICO_EXC_BUF_UNDERFLOW  <- cb not empty, but no valid item
      PICO_EXC_BUF_OVERFLOW   <- buf not large enough
 */
-pico_status_t picodata_cbGetItem(register picodata_CharBuffer this,
+pico_status_t picodata_cbGetItem(register picodata_CharBuffer me,
         picoos_uint8 *buf, const picoos_uint16 blenmax,
         picoos_uint16 *blen);
 
@@ -310,7 +310,7 @@ pico_status_t picodata_cbGetItem(register picodata_CharBuffer this,
      PICO_EXC_BUF_UNDERFLOW  <- cb not empty, but no valid item
      PICO_EXC_BUF_OVERFLOW   <- buf not large enough
 */
-pico_status_t picodata_cbGetSpeechData(register picodata_CharBuffer this,
+pico_status_t picodata_cbGetSpeechData(register picodata_CharBuffer me,
         picoos_uint8 *buf, const picoos_uint16 blenmax,
         picoos_uint16 *blen);
 
@@ -321,12 +321,12 @@ pico_status_t picodata_cbGetSpeechData(register picodata_CharBuffer this,
      PICO_EXC_BUF_UNDERFLOW  <- no valid item in buf
      PICO_EXC_BUF_OVERFLOW   <- cb not large enough
 */
-pico_status_t picodata_cbPutItem(register picodata_CharBuffer this,
+pico_status_t picodata_cbPutItem(register picodata_CharBuffer me,
         const picoos_uint8 *buf, const picoos_uint16 blenmax,
         picoos_uint16 *blen);
 
 /* unsafe, just for measuring purposes */
-picoos_uint8 picodata_cbGetFrontItemType(register picodata_CharBuffer this);
+picoos_uint8 picodata_cbGetFrontItemType(register picodata_CharBuffer me);
 
 /* ***************************************************************
  *                   items: support function                     *
@@ -490,18 +490,18 @@ picodata_ProcessingUnit picodata_newProcessingUnit(
 
 void picodata_disposeProcessingUnit(
         picoos_MemoryManager mm,
-        picodata_ProcessingUnit * this);
+        picodata_ProcessingUnit * me);
 
-picodata_CharBuffer picodata_getCbIn(picodata_ProcessingUnit this);
-picodata_CharBuffer picodata_getCbOut(picodata_ProcessingUnit this);
-pico_status_t picodata_setCbIn(picodata_ProcessingUnit this, picodata_CharBuffer cbIn);
-pico_status_t picodata_setCbOut(picodata_ProcessingUnit this, picodata_CharBuffer cbOut);
+picodata_CharBuffer picodata_getCbIn(picodata_ProcessingUnit me);
+picodata_CharBuffer picodata_getCbOut(picodata_ProcessingUnit me);
+pico_status_t picodata_setCbIn(picodata_ProcessingUnit me, picodata_CharBuffer cbIn);
+pico_status_t picodata_setCbOut(picodata_ProcessingUnit me, picodata_CharBuffer cbOut);
 
 /* protected */
-typedef pico_status_t (* picodata_puInitializeMethod) (register picodata_ProcessingUnit this, picoos_int32 mode);
-typedef pico_status_t (* picodata_puTerminateMethod) (register picodata_ProcessingUnit this);
-typedef picodata_step_result_t (* picodata_puStepMethod) (register picodata_ProcessingUnit this, picoos_int16 mode, picoos_uint16 * numBytesOutput);
-typedef pico_status_t (* picodata_puSubDeallocateMethod) (register picodata_ProcessingUnit this, picoos_MemoryManager mm);
+typedef pico_status_t (* picodata_puInitializeMethod) (register picodata_ProcessingUnit me, picoos_int32 mode);
+typedef pico_status_t (* picodata_puTerminateMethod) (register picodata_ProcessingUnit me);
+typedef picodata_step_result_t (* picodata_puStepMethod) (register picodata_ProcessingUnit me, picoos_int16 mode, picoos_uint16 * numBytesOutput);
+typedef pico_status_t (* picodata_puSubDeallocateMethod) (register picodata_ProcessingUnit me, picoos_MemoryManager mm);
 
 typedef struct picodata_processing_unit
 {
diff --git a/pico/lib/picokdbg.h b/pico/lib/picokdbg.h
index c17942f..0a0f7af 100644
--- a/pico/lib/picokdbg.h
+++ b/pico/lib/picokdbg.h
@@ -49,7 +49,7 @@ extern "C" {
 /**
  * to be used by picorsrc only
  */
-pico_status_t picokdbg_specializeDbgKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picokdbg_specializeDbgKnowledgeBase(picoknow_KnowledgeBase me,
                                                   picoos_Common common);
 
 typedef struct picokdbg_dbg *picokdbg_Dbg;
@@ -57,7 +57,7 @@ typedef struct picokdbg_dbg *picokdbg_Dbg;
 /**
  * return kb Phones for usage in PU
  */
-picokdbg_Dbg picokdbg_getDbg(picoknow_KnowledgeBase this);
+picokdbg_Dbg picokdbg_getDbg(picoknow_KnowledgeBase me);
 
 
 /* phone ID - phone symbol conversion functions */
diff --git a/pico/lib/picokdt.h b/pico/lib/picokdt.h
index 3ef973c..883347f 100644
--- a/pico/lib/picokdt.h
+++ b/pico/lib/picokdt.h
@@ -73,7 +73,7 @@ typedef enum {
     PICOKDT_KDTTYPE_PAM
 } picokdt_kdttype_t;
 
-pico_status_t picokdt_specializeDtKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picokdt_specializeDtKnowledgeBase(picoknow_KnowledgeBase me,
                                                 picoos_Common common,
                                                 const picokdt_kdttype_t type);
 
@@ -91,12 +91,12 @@ typedef struct picokdt_dtacc  * picokdt_DtACC;
 typedef struct picokdt_dtpam  * picokdt_DtPAM;
 
 /* return kb decision tree for usage in PU */
-picokdt_DtPosP picokdt_getDtPosP(picoknow_KnowledgeBase this);
-picokdt_DtPosD picokdt_getDtPosD(picoknow_KnowledgeBase this);
-picokdt_DtG2P  picokdt_getDtG2P (picoknow_KnowledgeBase this);
-picokdt_DtPHR  picokdt_getDtPHR (picoknow_KnowledgeBase this);
-picokdt_DtACC  picokdt_getDtACC (picoknow_KnowledgeBase this);
-picokdt_DtPAM  picokdt_getDtPAM (picoknow_KnowledgeBase this);
+picokdt_DtPosP picokdt_getDtPosP(picoknow_KnowledgeBase me);
+picokdt_DtPosD picokdt_getDtPosD(picoknow_KnowledgeBase me);
+picokdt_DtG2P  picokdt_getDtG2P (picoknow_KnowledgeBase me);
+picokdt_DtPHR  picokdt_getDtPHR (picoknow_KnowledgeBase me);
+picokdt_DtACC  picokdt_getDtACC (picoknow_KnowledgeBase me);
+picokdt_DtPAM  picokdt_getDtPAM (picoknow_KnowledgeBase me);
 
 
 /* number of attributes (= input vector size) for each tree type */
@@ -208,7 +208,7 @@ typedef struct {
    returns:       TRUE if okay, FALSE otherwise
    note:          use PICOKDT_OUTSIDEGRAPH* for att values outside context
 */
-picoos_uint8 picokdt_dtPosPconstructInVec(const picokdt_DtPosP this,
+picoos_uint8 picokdt_dtPosPconstructInVec(const picokdt_DtPosP me,
                                           const picoos_uint8 *graph,
                                           const picoos_uint16 graphlen,
                                           const picoos_uint8 specgraphflag);
@@ -217,13 +217,13 @@ picoos_uint8 picokdt_dtPosPconstructInVec(const picokdt_DtPosP this,
 /* classify a previously constructed input vector using tree 'this'
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPosPclassify(const picokdt_DtPosP this);
+picoos_uint8 picokdt_dtPosPclassify(const picokdt_DtPosP me);
 
 /* decompose the tree output and return the class in dtres
    dtres:         POS or POSgroup ID classification result
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPosPdecomposeOutClass(const picokdt_DtPosP this,
+picoos_uint8 picokdt_dtPosPdecomposeOutClass(const picokdt_DtPosP me,
                                              picokdt_classify_result_t *dtres);
 
 
@@ -248,7 +248,7 @@ picoos_uint8 picokdt_dtPosPdecomposeOutClass(const picokdt_DtPosP this,
                     if POS in fol* unique use this POS instead of real
                     history, use reverse output mapping in these cases
 */
-picoos_uint8 picokdt_dtPosDconstructInVec(const picokdt_DtPosD this,
+picoos_uint8 picokdt_dtPosDconstructInVec(const picokdt_DtPosD me,
                                           const picoos_uint16 * input);
 
 
@@ -256,18 +256,18 @@ picoos_uint8 picokdt_dtPosDconstructInVec(const picokdt_DtPosD this,
    treeout:       direct tree output value
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPosDclassify(const picokdt_DtPosD this,
+picoos_uint8 picokdt_dtPosDclassify(const picokdt_DtPosD me,
                                     picoos_uint16 *treeout);
 
 /* decompose the tree output and return the class in dtres
    dtres:         POS classification result
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPosDdecomposeOutClass(const picokdt_DtPosD this,
+picoos_uint8 picokdt_dtPosDdecomposeOutClass(const picokdt_DtPosD me,
                                              picokdt_classify_result_t *dtres);
 
 /* convert (unique) POS index into corresponding tree output index */
-picoos_uint8 picokdt_dtPosDreverseMapOutFixed(const picokdt_DtPosD this,
+picoos_uint8 picokdt_dtPosDreverseMapOutFixed(const picokdt_DtPosD me,
                                           const picoos_uint16 inval,
                                           picoos_uint16 *outval,
                                           picoos_uint16 *outfallbackval);
@@ -294,7 +294,7 @@ picoos_uint8 picokdt_dtPosDreverseMapOutFixed(const picokdt_DtPosD this,
    phonech1-3:    the three following phon chunks predicted (right-to-left)
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtG2PconstructInVec(const picokdt_DtG2P this,
+picoos_uint8 picokdt_dtG2PconstructInVec(const picokdt_DtG2P me,
                                          const picoos_uint8 *graph,
                                          const picoos_uint16 graphlen,
                                          const picoos_uint8 count,
@@ -310,14 +310,14 @@ picoos_uint8 picokdt_dtG2PconstructInVec(const picokdt_DtG2P this,
    treeout:       direct tree output value
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtG2Pclassify(const picokdt_DtG2P this,
+picoos_uint8 picokdt_dtG2Pclassify(const picokdt_DtG2P me,
                                    picoos_uint16 *treeout);
 
 /* decompose the tree output and return the class vector in dtvres
    dtvres:        phones vector classification result
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtG2PdecomposeOutClass(const picokdt_DtG2P this,
+picoos_uint8 picokdt_dtG2PdecomposeOutClass(const picokdt_DtG2P me,
                                   picokdt_classify_vecresult_t *dtvres);
 
 
@@ -345,7 +345,7 @@ picoos_uint8 picokdt_dtG2PdecomposeOutClass(const picokdt_DtG2P this,
    returns:         TRUE if okay, FALSE otherwise
    note:            use PICOKDT_EPSILON for att values outside context
 */
-picoos_uint8 picokdt_dtPHRconstructInVec(const picokdt_DtPHR this,
+picoos_uint8 picokdt_dtPHRconstructInVec(const picokdt_DtPHR me,
                                          const picoos_uint8 pre2,
                                          const picoos_uint8 pre1,
                                          const picoos_uint8 src,
@@ -358,13 +358,13 @@ picoos_uint8 picokdt_dtPHRconstructInVec(const picokdt_DtPHR this,
 /* classify a previously constructed input vector using tree 'this'
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPHRclassify(const picokdt_DtPHR this);
+picoos_uint8 picokdt_dtPHRclassify(const picokdt_DtPHR me);
 
 /* decompose the tree output and return the class vector in dtres
    dtres:         phrasing classification result
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPHRdecomposeOutClass(const picokdt_DtPHR this,
+picoos_uint8 picokdt_dtPHRdecomposeOutClass(const picokdt_DtPHR me,
                                             picokdt_classify_result_t *dtres);
 
 
@@ -400,7 +400,7 @@ picoos_uint8 picokdt_dtPHRdecomposeOutClass(const picokdt_DtPHR this,
    returns:         TRUE if okay, FALSE otherwise
    note:            use PICOKDT_EPSILON for att 0-4 values outside context
 */
-picoos_uint8 picokdt_dtACCconstructInVec(const picokdt_DtACC this,
+picoos_uint8 picokdt_dtACCconstructInVec(const picokdt_DtACC me,
                                          const picoos_uint8 pre2,
                                          const picoos_uint8 pre1,
                                          const picoos_uint8 src,
@@ -419,14 +419,14 @@ picoos_uint8 picokdt_dtACCconstructInVec(const picokdt_DtACC this,
    treeout:       direct tree output value
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtACCclassify(const picokdt_DtACC this,
+picoos_uint8 picokdt_dtACCclassify(const picokdt_DtACC me,
                                    picoos_uint16 *treeout);
 
 /* decompose the tree output and return the class vector in dtres
    dtres:         phrasing classification result
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtACCdecomposeOutClass(const picokdt_DtACC this,
+picoos_uint8 picokdt_dtACCdecomposeOutClass(const picokdt_DtACC me,
                                             picokdt_classify_result_t *dtres);
 
 
@@ -440,20 +440,20 @@ picoos_uint8 picokdt_dtACCdecomposeOutClass(const picokdt_DtACC this,
    veclen:        length of vec in number of bytes
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPAMconstructInVec(const picokdt_DtPAM this,
+picoos_uint8 picokdt_dtPAMconstructInVec(const picokdt_DtPAM me,
                                          const picoos_uint8 *vec,
                                          const picoos_uint8 veclen);
 
 /* classify a previously constructed input vector using tree 'this'
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPAMclassify(const picokdt_DtPAM this);
+picoos_uint8 picokdt_dtPAMclassify(const picokdt_DtPAM me);
 
 /* decompose the tree output and return the class in dtres
    dtres:         phones vector classification result
    returns:       TRUE if okay, FALSE otherwise
 */
-picoos_uint8 picokdt_dtPAMdecomposeOutClass(const picokdt_DtPAM this,
+picoos_uint8 picokdt_dtPAMdecomposeOutClass(const picokdt_DtPAM me,
                                             picokdt_classify_result_t *dtres);
 
 #ifdef __cplusplus
diff --git a/pico/lib/picokfst.h b/pico/lib/picokfst.h
index b391013..c979593 100644
--- a/pico/lib/picokfst.h
+++ b/pico/lib/picokfst.h
@@ -87,7 +87,7 @@ enum picofst_transduction_mode {
 /* calculates a small number of data (e.g. addresses) from kb for fast access.
  * This data is encapsulated in a picokfst_FST that can later be retrieved
  * with picokfst_getFST. */
-pico_status_t picokfst_specializeFSTKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picokfst_specializeFSTKnowledgeBase(picoknow_KnowledgeBase me,
                                                   picoos_Common common);
 
 
@@ -99,7 +99,7 @@ pico_status_t picokfst_specializeFSTKnowledgeBase(picoknow_KnowledgeBase this,
 typedef struct picokfst_fst * picokfst_FST;
 
 /* return kb FST for usage in PU */
-picokfst_FST picokfst_getFST(picoknow_KnowledgeBase this);
+picokfst_FST picokfst_getFST(picoknow_KnowledgeBase me);
 
 
 /* ************************************************************/
@@ -108,31 +108,31 @@ picokfst_FST picokfst_getFST(picoknow_KnowledgeBase this);
 
 /* returns transduction mode specified with rule sources;
    result to be interpreted as set of picofst_transduction_mode */
-picoos_uint8 picokfst_kfstGetTransductionMode(picokfst_FST this);
+picoos_uint8 picokfst_kfstGetTransductionMode(picokfst_FST me);
 
 /* returns number of states and number of pair classes in FST;
    legal states are 1..nrStates, legal classes are 1..nrClasses */
-void picokfst_kfstGetFSTSizes (picokfst_FST this, picoos_int32 *nrStates, picoos_int32 *nrClasses);
+void picokfst_kfstGetFSTSizes (picokfst_FST me, picoos_int32 *nrStates, picoos_int32 *nrClasses);
 
 /* starts search for all pairs with input symbol 'inSym'; '*inSymFound' returns whether
    such pairs exist at all; '*searchState' returns a search state to be used in
    subsequent calls to function 'picokfst_kfstGetNextPair', which must be used
    to get the symbol pairs */
-void picokfst_kfstStartPairSearch (picokfst_FST this, picokfst_symid_t inSym,
+void picokfst_kfstStartPairSearch (picokfst_FST me, picokfst_symid_t inSym,
                                           picoos_bool * inSymFound, picoos_int32 * searchState);
 
 /* gets next pair for input symbol specified with preceding call to 'picokfst_kfstStartPairSearch';
    '*searchState' maintains the search state, 'pairFound' returns whether any more pair was found,
    '*outSym' returns the output symbol of the found pair, and '*pairClass' returns the
    transition class of the found symbol pair */
-void picokfst_kfstGetNextPair (picokfst_FST this, picoos_int32 * searchState,
+void picokfst_kfstGetNextPair (picokfst_FST me, picoos_int32 * searchState,
                                       picoos_bool * pairFound,
                                       picokfst_symid_t * outSym, picokfst_class_t * pairClass);
 
 /* attempts to do FST transition from state 'startState' with pair class 'transClass';
    if such a transition exists, 'endState' returns the end state of the transition (> 0),
    otherwise 'endState' returns <= 0 */
-void picokfst_kfstGetTrans (picokfst_FST this, picokfst_state_t startState, picokfst_class_t transClass,
+void picokfst_kfstGetTrans (picokfst_FST me, picokfst_state_t startState, picokfst_class_t transClass,
                                    picokfst_state_t * endState);
 
 /* starts search for all pairs with input epsilon symbol and all correponding
@@ -141,7 +141,7 @@ void picokfst_kfstGetTrans (picokfst_FST this, picokfst_state_t startState, pico
    '*inEpsTransFound' returns whether any such transition was found at all;
    if so, '*searchState' returns a search state to be used in subsequent calls
    to 'picokfst_kfstGetNextInEpsTrans' */
-void picokfst_kfstStartInEpsTransSearch (picokfst_FST this, picokfst_state_t startState,
+void picokfst_kfstStartInEpsTransSearch (picokfst_FST me, picokfst_state_t startState,
                                                 picoos_bool * inEpsTransFound, picoos_int32 * searchState);
 
 /* gets next FST transition with a pair with empty input symbol starting from a state
@@ -150,7 +150,7 @@ void picokfst_kfstStartInEpsTransSearch (picokfst_FST this, picokfst_state_t sta
    whether a new transition with input epsilon was found, '*outSym 'returns
    the output symbol of the found pair, and '*endState' returns the end state
    of the found transition with that pair */
-void picokfst_kfstGetNextInEpsTrans (picokfst_FST this, picoos_int32 * searchState,
+void picokfst_kfstGetNextInEpsTrans (picokfst_FST me, picoos_int32 * searchState,
                                             picoos_bool * inEpsTransFound,
                                             picokfst_symid_t * outSym, picokfst_state_t * endState);
 
@@ -159,7 +159,7 @@ void picokfst_kfstGetNextInEpsTrans (picokfst_FST this, picoos_int32 * searchSta
    always do a last transition with a termination symbol pair, this function
    defines a state as an accepting state if there is transition to state 1
    with the terminator symbol pair */
-picoos_bool picokfst_kfstIsAcceptingState (picokfst_FST this, picokfst_state_t state);
+picoos_bool picokfst_kfstIsAcceptingState (picokfst_FST me, picokfst_state_t state);
 
 #ifdef __cplusplus
 }
diff --git a/pico/lib/picoklex.h b/pico/lib/picoklex.h
index e186393..9a9a34f 100644
--- a/pico/lib/picoklex.h
+++ b/pico/lib/picoklex.h
@@ -45,7 +45,7 @@ extern "C" {
 /* to be used by picorsrc only */
 /* ************************************************************/
 
-pico_status_t picoklex_specializeLexKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picoklex_specializeLexKnowledgeBase(picoknow_KnowledgeBase me,
                                                   picoos_Common common);
 
 
@@ -57,7 +57,7 @@ pico_status_t picoklex_specializeLexKnowledgeBase(picoknow_KnowledgeBase this,
 typedef struct picoklex_lex * picoklex_Lex;
 
 /* return kb lex for usage in PU */
-picoklex_Lex picoklex_getLex(picoknow_KnowledgeBase this);
+picoklex_Lex picoklex_getLex(picoknow_KnowledgeBase me);
 
 
 /* ************************************************************/
@@ -106,7 +106,7 @@ typedef struct {
    PICOKLEX_IND_SIZE bytes are used for the index, these ind bytes are
    saved in the WORDINDEX items. If at least one entry is found TRUE
    is returned, FALSE otherwise */
-picoos_uint8 picoklex_lexLookup(const picoklex_Lex this,
+picoos_uint8 picoklex_lexLookup(const picoklex_Lex me,
                                 const picoos_uint8 *graph,
                                 const picoos_uint16 graphlen,
                                 picoklex_lexl_result_t *lexres);
@@ -114,7 +114,7 @@ picoos_uint8 picoklex_lexLookup(const picoklex_Lex this,
 /** lookup lex entry by index ind; ind is a sequence of bytes with
    length indlen (must be equal PICOKLEX_IND_SIZE) that is the content
    of a WORDINDEX item. Returns TRUE if okay, FALSE otherwise */
-picoos_uint8 picoklex_lexIndLookup(const picoklex_Lex this,
+picoos_uint8 picoklex_lexIndLookup(const picoklex_Lex me,
                                    const picoos_uint8 *ind,
                                    const picoos_uint8 indlen,
                                    picoos_uint8 *pos,
diff --git a/pico/lib/picoknow.h b/pico/lib/picoknow.h
index 1444856..9c11fe7 100644
--- a/pico/lib/picoknow.h
+++ b/pico/lib/picoknow.h
@@ -164,7 +164,7 @@ typedef enum picoknow_kb_id {
  */
 typedef struct picoknow_knowledge_base * picoknow_KnowledgeBase;
 
-typedef pico_status_t (* picoknow_kbSubDeallocate) (register picoknow_KnowledgeBase this, picoos_MemoryManager mm);
+typedef pico_status_t (* picoknow_kbSubDeallocate) (register picoknow_KnowledgeBase me, picoos_MemoryManager mm);
 
 typedef struct picoknow_knowledge_base {
     /* public */
@@ -180,7 +180,7 @@ typedef struct picoknow_knowledge_base {
 
 extern picoknow_KnowledgeBase picoknow_newKnowledgeBase(picoos_MemoryManager mm);
 
-extern void picoknow_disposeKnowledgeBase(picoos_MemoryManager mm, picoknow_KnowledgeBase * this);
+extern void picoknow_disposeKnowledgeBase(picoos_MemoryManager mm, picoknow_KnowledgeBase * me);
 
 #ifdef __cplusplus
 }
diff --git a/pico/lib/picokpdf.h b/pico/lib/picokpdf.h
index f4508a1..15fd42e 100644
--- a/pico/lib/picokpdf.h
+++ b/pico/lib/picokpdf.h
@@ -77,7 +77,7 @@ typedef enum {
     PICOKPDF_KPDFTYPE_PHS
 } picokpdf_kpdftype_t;
 
-pico_status_t picokpdf_specializePdfKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picokpdf_specializePdfKnowledgeBase(picoknow_KnowledgeBase me,
                                               picoos_Common common,
                                               const picokpdf_kpdftype_t type);
 
@@ -132,9 +132,9 @@ typedef struct picokpdf_pdfphs {
 } picokpdf_pdfphs_t;
 
 /* return kb pdf for usage in PU */
-picokpdf_PdfDUR picokpdf_getPdfDUR(picoknow_KnowledgeBase this);
-picokpdf_PdfMUL picokpdf_getPdfMUL(picoknow_KnowledgeBase this);
-picokpdf_PdfPHS picokpdf_getPdfPHS(picoknow_KnowledgeBase this);
+picokpdf_PdfDUR picokpdf_getPdfDUR(picoknow_KnowledgeBase me);
+picokpdf_PdfMUL picokpdf_getPdfMUL(picoknow_KnowledgeBase me);
+picokpdf_PdfPHS picokpdf_getPdfPHS(picoknow_KnowledgeBase me);
 
 
 /* ************************************************************/
@@ -142,7 +142,7 @@ picokpdf_PdfPHS picokpdf_getPdfPHS(picoknow_KnowledgeBase this);
 /* ************************************************************/
 
 /* e.g. */
-/*picoos_uint8 picokpdf_pdfDURgetEle(const picokpdf_PdfDUR this,
+/*picoos_uint8 picokpdf_pdfDURgetEle(const picokpdf_PdfDUR me,
                                    const picoos_uint16 row,
                                    const picoos_uint16 col,
                                    picoos_uint16 *val);
diff --git a/pico/lib/picokpr.h b/pico/lib/picokpr.h
index 0532b49..8114875 100644
--- a/pico/lib/picokpr.h
+++ b/pico/lib/picokpr.h
@@ -51,7 +51,7 @@ extern "C" {
 /* to be used by picorsrc only */
 /* ************************************************************/
 
-pico_status_t picokpr_specializePreprocKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picokpr_specializePreprocKnowledgeBase(picoknow_KnowledgeBase me,
                                                      picoos_Common common);
 
 
@@ -87,7 +87,7 @@ typedef picoos_uint32 picokpr_TokSetWP;
 typedef struct picokpr_preproc * picokpr_Preproc;
 
 /* return kb preproc for usage in PU */
-picokpr_Preproc picokpr_getPreproc(picoknow_KnowledgeBase this);
+picokpr_Preproc picokpr_getPreproc(picoknow_KnowledgeBase me);
 
 
 /* *****************************************************************************/
diff --git a/pico/lib/picoktab.h b/pico/lib/picoktab.h
index 71ba2ab..125d832 100644
--- a/pico/lib/picoktab.h
+++ b/pico/lib/picoktab.h
@@ -61,10 +61,10 @@ typedef struct picoktab_fixed_ids {
 } picoktab_fixed_ids_t;
 
 /* to be used by picorsrc only */
-pico_status_t picoktab_specializeIdsKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picoktab_specializeIdsKnowledgeBase(picoknow_KnowledgeBase me,
                                                   picoos_Common common);
 
-picoktab_FixedIds picoktab_getFixedIds(picoknow_KnowledgeBase this);
+picoktab_FixedIds picoktab_getFixedIds(picoknow_KnowledgeBase me);
 
 
 /* ************************************************************/
@@ -74,52 +74,52 @@ picoktab_FixedIds picoktab_getFixedIds(picoknow_KnowledgeBase this);
 typedef struct picoktab_graphs *picoktab_Graphs;
 
 /* to be used by picorsrc only */
-pico_status_t picoktab_specializeGraphsKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picoktab_specializeGraphsKnowledgeBase(picoknow_KnowledgeBase me,
                                                      picoos_Common common);
 
 /* return kb graphs for usage in PU */
-picoktab_Graphs picoktab_getGraphs(picoknow_KnowledgeBase this);
+picoktab_Graphs picoktab_getGraphs(picoknow_KnowledgeBase me);
 
 /* graph access routine: if the desired graph 'utf8graph' exists in
    the graph table a graph offset > 0 is returned, which then can be
    used to access the properties */
-picoos_uint32 picoktab_graphOffset(const picoktab_Graphs this,
+picoos_uint32 picoktab_graphOffset(const picoktab_Graphs me,
                                    picoos_uchar * utf8graph);
 
 
 /* check if UTF8 char 'graph' has property vowellike, return non-zero
    if 'ch' has the property, 0 otherwise */
-picoos_uint8 picoktab_hasVowellikeProp(const picoktab_Graphs this,
+picoos_uint8 picoktab_hasVowellikeProp(const picoktab_Graphs me,
                                        const picoos_uint8 *graph,
                                        const picoos_uint8 graphlenmax);
 
 /* graph properties access routines: if graph with offset 'graphsOffset' has the
    desired property, returns TRUE if 'ch' has the property, FALSE otherwise  */
-picoos_bool  picoktab_getIntPropTokenType(const picoktab_Graphs this,
+picoos_bool  picoktab_getIntPropTokenType(const picoktab_Graphs me,
                                            picoos_uint32 graphsOffset,
                                            picoos_uint8 *stokenType);
-picoos_bool  picoktab_getIntPropTokenSubType(const picoktab_Graphs this,
+picoos_bool  picoktab_getIntPropTokenSubType(const picoktab_Graphs me,
                                               picoos_uint32 graphsOffset,
                                               picoos_int8 *stokenSubType);
-picoos_bool  picoktab_getIntPropValue(const picoktab_Graphs this,
+picoos_bool  picoktab_getIntPropValue(const picoktab_Graphs me,
                                       picoos_uint32 graphsOffset,
                                       picoos_uint32 *value);
-picoos_bool  picoktab_getStrPropLowercase(const picoktab_Graphs this,
+picoos_bool  picoktab_getStrPropLowercase(const picoktab_Graphs me,
                                           picoos_uint32 graphsOffset,
                                           picoos_uchar *lowercase);
-picoos_bool  picoktab_getStrPropGraphsubs1(const picoktab_Graphs this,
+picoos_bool  picoktab_getStrPropGraphsubs1(const picoktab_Graphs me,
                                            picoos_uint32 graphsOffset,
                                            picoos_uchar *graphsubs1);
-picoos_bool  picoktab_getStrPropGraphsubs2(const picoktab_Graphs this,
+picoos_bool  picoktab_getStrPropGraphsubs2(const picoktab_Graphs me,
                                            picoos_uint32 graphsOffset,
                                            picoos_uchar *graphsubs2);
-picoos_bool  picoktab_getIntPropPunct(const picoktab_Graphs this,
+picoos_bool  picoktab_getIntPropPunct(const picoktab_Graphs me,
                                       picoos_uint32 graphsOffset,
                                       picoos_uint8 *info1,
                                       picoos_uint8 *info2);
 
-picoos_uint16 picoktab_graphsGetNumEntries(const picoktab_Graphs this);
-void picoktab_graphsGetGraphInfo(const picoktab_Graphs this,
+picoos_uint16 picoktab_graphsGetNumEntries(const picoktab_Graphs me);
+void picoktab_graphsGetGraphInfo(const picoktab_Graphs me,
         picoos_uint16 graphIndex, picoos_uchar * from, picoos_uchar * to,
         picoos_uint8 * propset,
         picoos_uint8 * stokenType, picoos_uint8 * stokenSubType,
@@ -133,60 +133,60 @@ void picoktab_graphsGetGraphInfo(const picoktab_Graphs this,
 /* ************************************************************/
 
 /* to be used by picorsrc only */
-pico_status_t picoktab_specializePhonesKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picoktab_specializePhonesKnowledgeBase(picoknow_KnowledgeBase me,
                                                      picoos_Common common);
 
 typedef struct picoktab_phones *picoktab_Phones;
 
 /* return kb Phones for usage in PU */
-picoktab_Phones picoktab_getPhones(picoknow_KnowledgeBase this);
+picoktab_Phones picoktab_getPhones(picoknow_KnowledgeBase me);
 
 /* check if 'ch' has a property, return non-zero if 'ch' has the
    property, 0 otherwise */
-picoos_uint8 picoktab_hasVowelProp(const picoktab_Phones this,
+picoos_uint8 picoktab_hasVowelProp(const picoktab_Phones me,
                                    const picoos_uint8 ch);
-picoos_uint8 picoktab_hasDiphthProp(const picoktab_Phones this,
+picoos_uint8 picoktab_hasDiphthProp(const picoktab_Phones me,
                                     const picoos_uint8 ch);
-picoos_uint8 picoktab_hasGlottProp(const picoktab_Phones this,
+picoos_uint8 picoktab_hasGlottProp(const picoktab_Phones me,
                                    const picoos_uint8 ch);
-picoos_uint8 picoktab_hasNonsyllvowelProp(const picoktab_Phones this,
+picoos_uint8 picoktab_hasNonsyllvowelProp(const picoktab_Phones me,
                                           const picoos_uint8 ch);
-picoos_uint8 picoktab_hasSyllconsProp(const picoktab_Phones this,
+picoos_uint8 picoktab_hasSyllconsProp(const picoktab_Phones me,
                                       const picoos_uint8 ch);
 
 /* to speed up processing for often used combinations of properties
    the following functions are provided, which check if the property
    combination is true for 'ch' */
-picoos_bool picoktab_isSyllCarrier(const picoktab_Phones this,
+picoos_bool picoktab_isSyllCarrier(const picoktab_Phones me,
                                     const picoos_uint8 ch);
 
 /* some properties can be assigned to a single sym only, check if 'ch'
    is a special sym, return TRUE if it is the special sym, FALSE
    otherwise */
-picoos_bool picoktab_isPrimstress(const picoktab_Phones this,
+picoos_bool picoktab_isPrimstress(const picoktab_Phones me,
                                    const picoos_uint8 ch);
-picoos_bool picoktab_isSecstress(const picoktab_Phones this,
+picoos_bool picoktab_isSecstress(const picoktab_Phones me,
                                   const picoos_uint8 ch);
-picoos_bool picoktab_isSyllbound(const picoktab_Phones this,
+picoos_bool picoktab_isSyllbound(const picoktab_Phones me,
                                   const picoos_uint8 ch);
-picoos_bool picoktab_isWordbound(const picoktab_Phones this,
+picoos_bool picoktab_isWordbound(const picoktab_Phones me,
                                   const picoos_uint8 ch);
-picoos_bool picoktab_isPause(const picoktab_Phones this,
+picoos_bool picoktab_isPause(const picoktab_Phones me,
                               const picoos_uint8 ch);
 
 /* get specific sym values */
-picoos_uint8 picoktab_getPrimstressID(const picoktab_Phones this);
-picoos_uint8 picoktab_getSecstressID(const picoktab_Phones this);
-picoos_uint8 picoktab_getSyllboundID(const picoktab_Phones this);
-picoos_uint8 picoktab_getWordboundID(const picoktab_Phones this);
-picoos_uint8 picoktab_getPauseID(const picoktab_Phones this);
+picoos_uint8 picoktab_getPrimstressID(const picoktab_Phones me);
+picoos_uint8 picoktab_getSecstressID(const picoktab_Phones me);
+picoos_uint8 picoktab_getSyllboundID(const picoktab_Phones me);
+picoos_uint8 picoktab_getWordboundID(const picoktab_Phones me);
+picoos_uint8 picoktab_getPauseID(const picoktab_Phones me);
 
 /* ************************************************************/
 /* Pos type and functions */
 /* ************************************************************/
 
 /* to be used by picorsrc only */
-pico_status_t picoktab_specializePosKnowledgeBase(picoknow_KnowledgeBase this,
+pico_status_t picoktab_specializePosKnowledgeBase(picoknow_KnowledgeBase me,
                                                   picoos_Common common);
 
 typedef struct picoktab_pos *picoktab_Pos;
@@ -194,25 +194,25 @@ typedef struct picoktab_pos *picoktab_Pos;
 #define PICOKTAB_MAXNRPOS_IN_COMB  8
 
 /* return kb Pos for usage in PU */
-picoktab_Pos picoktab_getPos(picoknow_KnowledgeBase this);
+picoktab_Pos picoktab_getPos(picoknow_KnowledgeBase me);
 
 /* returns TRUE if 'pos' is the ID of a unique (ie. non-combined) POS,
    returns FALSE otherwise */
-picoos_bool picoktab_isUniquePos(const picoktab_Pos this,
+picoos_bool picoktab_isUniquePos(const picoktab_Pos me,
                                   const picoos_uint8 pos);
 
 /* returns TRUE if the non-combined 'pos' is one of the POSes in the
    combined POS group 'posgroup, returns FALSE otherwise. Note: if
    'posgroup' is itself non-combined, this function returns TRUE if it
    matches with 'pos', and FALSE otherwise */
-picoos_bool picoktab_isPartOfPosGroup(const picoktab_Pos this,
+picoos_bool picoktab_isPartOfPosGroup(const picoktab_Pos me,
                                        const picoos_uint8 pos,
                                        const picoos_uint8 posgroup);
 
 /* return the combined POS group ID that is a representative ID for
    all the 'poslistlen' POSes (which can be combined themselves) in
    poslist. Returns '0' in case of error. */
-picoos_uint8 picoktab_getPosGroup(const picoktab_Pos this,
+picoos_uint8 picoktab_getPosGroup(const picoktab_Pos me,
                                   const picoos_uint8 *poslist,
                                   const picoos_uint8 poslistlen);
 
diff --git a/pico/lib/picoos.h b/pico/lib/picoos.h
index 859e176..038ba17 100644
--- a/pico/lib/picoos.h
+++ b/pico/lib/picoos.h
@@ -129,7 +129,7 @@ typedef struct picoos_common {
 
 picoos_Common picoos_newCommon(picoos_MemoryManager mm);
 
-void picoos_disposeCommon(picoos_MemoryManager mm, picoos_Common * this);
+void picoos_disposeCommon(picoos_MemoryManager mm, picoos_Common * me);
 
 
 /* *****************************************************************/
@@ -161,8 +161,8 @@ picoos_MemoryManager picoos_newMemoryManager(
 void picoos_disposeMemoryManager(picoos_MemoryManager * mm);
 
 
-void * picoos_allocate(picoos_MemoryManager this, picoos_objsize_t byteSize);
-void picoos_deallocate(picoos_MemoryManager this, void * * adr);
+void * picoos_allocate(picoos_MemoryManager me, picoos_objsize_t byteSize);
+void picoos_deallocate(picoos_MemoryManager me, void * * adr);
 
 /* the following memory manager routines are for testing and
    debugging purposes */
@@ -190,14 +190,14 @@ void picoos_protectMem(
         picoos_bool enable);
 
 void picoos_getMemUsage(
-        picoos_MemoryManager this,
+        picoos_MemoryManager me,
         picoos_bool resetIncremental,
         picoos_int32 *usedBytes,
         picoos_int32 *incrUsedBytes,
         picoos_int32 *maxUsedBytes);
 
 void picoos_showMemUsage(
-        picoos_MemoryManager this,
+        picoos_MemoryManager me,
         picoos_bool incremental,
         picoos_bool resetIncremental);
 
@@ -221,30 +221,30 @@ void picoos_setErrorMsg(picoos_char * dst, picoos_objsize_t siz,
 picoos_ExceptionManager picoos_newExceptionManager(picoos_MemoryManager mm);
 
 void picoos_disposeExceptionManager(picoos_MemoryManager mm,
-        picoos_ExceptionManager * this);
+        picoos_ExceptionManager * me);
 
 
-void picoos_emReset(picoos_ExceptionManager this);
+void picoos_emReset(picoos_ExceptionManager me);
 
 /* For convenience, this function returns the resulting exception code of 'this'
  * (as would be returned by emGetExceptionCode).
  * The return value therefore is NOT the status of raising
  * the error! */
-pico_status_t picoos_emRaiseException(picoos_ExceptionManager this,
+pico_status_t picoos_emRaiseException(picoos_ExceptionManager me,
         pico_status_t exceptionCode, picoos_char * baseMessage, picoos_char * fmt, ...);
 
-pico_status_t picoos_emGetExceptionCode(picoos_ExceptionManager this);
+pico_status_t picoos_emGetExceptionCode(picoos_ExceptionManager me);
 
-void picoos_emGetExceptionMessage(picoos_ExceptionManager this, picoos_char * msg, picoos_uint16 maxsize);
+void picoos_emGetExceptionMessage(picoos_ExceptionManager me, picoos_char * msg, picoos_uint16 maxsize);
 
-void picoos_emRaiseWarning(picoos_ExceptionManager this,
+void picoos_emRaiseWarning(picoos_ExceptionManager me,
         pico_status_t warningCode, picoos_char * baseMessage, picoos_char * fmt, ...);
 
-picoos_uint8 picoos_emGetNumOfWarnings(picoos_ExceptionManager this);
+picoos_uint8 picoos_emGetNumOfWarnings(picoos_ExceptionManager me);
 
-pico_status_t picoos_emGetWarningCode(picoos_ExceptionManager this, picoos_uint8 warnNum);
+pico_status_t picoos_emGetWarningCode(picoos_ExceptionManager me, picoos_uint8 warnNum);
 
-void picoos_emGetWarningMessage(picoos_ExceptionManager this, picoos_uint8 warnNum, picoos_char * msg, picoos_uint16 maxsize);
+void picoos_emGetWarningMessage(picoos_ExceptionManager me, picoos_uint8 warnNum, picoos_char * msg, picoos_uint16 maxsize);
 
 
 
diff --git a/pico/lib/picorsrc.h b/pico/lib/picorsrc.h
index 4dfb19e..a14dfe7 100644
--- a/pico/lib/picorsrc.h
+++ b/pico/lib/picorsrc.h
@@ -97,7 +97,7 @@ typedef struct picorsrc_resource         * picorsrc_Resource;
 
 picorsrc_ResourceManager picorsrc_newResourceManager(picoos_MemoryManager mm, picoos_Common common /* , picoos_char * configFile */);
 
-void picorsrc_disposeResourceManager(picoos_MemoryManager mm, picorsrc_ResourceManager * this);
+void picorsrc_disposeResourceManager(picoos_MemoryManager mm, picorsrc_ResourceManager * me);
 
 
 /* **************************************************************************
@@ -113,14 +113,14 @@ picoos_int16 picoctrl_isValidResourceHandle(picorsrc_Resource resource);
 
 /* load resource file. the type of resource file, magic numbers, checksum etc. are in the header, then follows the directory
  * (with fixed structure per resource type), then the knowledge bases themselves (as byte streams) */
-pico_status_t picorsrc_loadResource(picorsrc_ResourceManager this,
+pico_status_t picorsrc_loadResource(picorsrc_ResourceManager me,
         picoos_char * fileName, picorsrc_Resource * resource);
 
 /* unload resource file. (warn if resource file is busy) */
-pico_status_t picorsrc_unloadResource(picorsrc_ResourceManager this, picorsrc_Resource * rsrc);
+pico_status_t picorsrc_unloadResource(picorsrc_ResourceManager me, picorsrc_Resource * rsrc);
 
 
-pico_status_t picorsrc_createDefaultResource(picorsrc_ResourceManager this /*,
+pico_status_t picorsrc_createDefaultResource(picorsrc_ResourceManager me /*,
         picorsrc_Resource * resource */);
 
 
@@ -134,14 +134,14 @@ pico_status_t picorsrc_rsrcGetName(picorsrc_Resource resource,
  ****************************************************************************/
 
 
-pico_status_t picorsrc_createVoiceDefinition(picorsrc_ResourceManager this,
+pico_status_t picorsrc_createVoiceDefinition(picorsrc_ResourceManager me,
         picoos_char * voiceName);
 
 
-pico_status_t picorsrc_releaseVoiceDefinition(picorsrc_ResourceManager this,
+pico_status_t picorsrc_releaseVoiceDefinition(picorsrc_ResourceManager me,
         picoos_char * voiceName);
 
-pico_status_t picorsrc_addResourceToVoiceDefinition(picorsrc_ResourceManager this,
+pico_status_t picorsrc_addResourceToVoiceDefinition(picorsrc_ResourceManager me,
         picoos_char * voiceName, picoos_char * resourceName);
 
 /* **************************************************************************
@@ -171,10 +171,10 @@ typedef struct picorsrc_voice {
 
 
 /* create voice, given a voice name. the corresponding lock counts are incremented */
-pico_status_t picorsrc_createVoice(picorsrc_ResourceManager this, const picoos_char * voiceName, picorsrc_Voice * voice);
+pico_status_t picorsrc_createVoice(picorsrc_ResourceManager me, const picoos_char * voiceName, picorsrc_Voice * voice);
 
 /* dispose voice. the corresponding lock counts are decremented. */
-pico_status_t picorsrc_releaseVoice(picorsrc_ResourceManager this, picorsrc_Voice * voice);
+pico_status_t picorsrc_releaseVoice(picorsrc_ResourceManager me, picorsrc_Voice * voice);
 
 #ifdef __cplusplus
 }
diff --git a/pico/lib/picotrns.h b/pico/lib/picotrns.h
index f535ce0..2808837 100644
--- a/pico/lib/picotrns.h
+++ b/pico/lib/picotrns.h
@@ -166,17 +166,17 @@ picotrns_SimpleTransducer picotrns_newSimpleTransducer(picoos_MemoryManager mm,
                                               picoos_Common common,
                                               picoos_uint16 maxAltDescLen);
 
-pico_status_t picotrns_disposeSimpleTransducer(picotrns_SimpleTransducer * this,
+pico_status_t picotrns_disposeSimpleTransducer(picotrns_SimpleTransducer * me,
         picoos_MemoryManager mm);
 
 pico_status_t  picotrns_stInitialize(picotrns_SimpleTransducer transducer);
 
-pico_status_t picotrns_stAddWithPlane(picotrns_SimpleTransducer this, picoos_char * inStr, picoos_uint8 plane);
+pico_status_t picotrns_stAddWithPlane(picotrns_SimpleTransducer me, picoos_char * inStr, picoos_uint8 plane);
 
-pico_status_t picotrns_stTransduce(picotrns_SimpleTransducer this, picokfst_FST fst);
+pico_status_t picotrns_stTransduce(picotrns_SimpleTransducer me, picokfst_FST fst);
 
 pico_status_t picotrns_stGetSymSequence(
-        picotrns_SimpleTransducer this,
+        picotrns_SimpleTransducer me,
         picoos_uint8 * outputSymIds,
         picoos_uint32 maxOutputSymIds);
 
